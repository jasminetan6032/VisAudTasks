#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar 17 14:30:19 2023

@author: jwt30

Data collected prior to March 2023 had several issues with triggers. 
"""

import mne 
import numpy
import pandas
import pickle

right_triggers = [256,512,1024,2048]
left_triggers = [4096,8192,16384,32768]
right_targets = [11,13]
left_targets = [12,14]
all_targets = right_targets + left_targets
all_triggers = right_triggers + left_triggers
not_targets = [1,2,3,4,5,6,7,8,25,26,27,28,35,36,37,38]
stim_triggers = all_targets + not_targets
allowed_triggers = all_targets + all_triggers + not_targets
old_triggers = [131,132,133,134]

auditory_event_dict = {'attend_right_standard_high_right': 1,
                     'attend_right_standard_low_right': 3,
                     'attend_right_target_high': 11,
                     'attend_right_target_low': 13,
                     'attend_right_low_left': 5,
                     'attend_right_high_left': 7,
                     'attend_right_devL_low': 35,
                     'attend_right_devL_high': 37,
                     'novel_left_low': 25,
                     'novel_left_high': 27,
                     'attend_left_standard_high_left': 2,
                     'attend_left_standard_low_left': 4,
                     'attend_left_target_high': 12,
                     'attend_left_target_low': 14,
                     'attend_left_low_right': 6,
                     'attend_left_high_right': 8,
                     'attend_left_devR_low': 36,
                     'attend_left_devR_high': 38,
                     'novel_right_low': 26,
                     'novel_right_high': 28,
                     }  

file = '/autofs/cluster/transcend/MEG/AttenAud/110101/visit_20220930/110101_AttenAud_run02_raw.fif'
raw = mne.io.read_raw_fif(file)
events = mne.find_events(raw, stim_channel='STI101')

#check for number of stimuli and response triggers. If it doesn't equal to 288 for AttenAud and 168 for AttenVis (per run), or if there are an unreasonable number of response triggers, flag to take a look.
stimuli_list = events[:,2].tolist()
list_of_stimuli_triggers = [i for i in stimuli_list if i < 255] 
list_of_response_triggers = [i for i in stimuli_list if i > 255]

#check column two for any triggers that do not start from zero and print the number in column 3
response_trigger_initial_states = [i for i in range(0, len(events)) if numpy.any(events[i,1]== all_triggers)] #only apply the superimposition fix if the initial state is a response trigger
non_zero_initial_states = [i for i in range(0, len(events)) if not (numpy.any(events[i,1]== all_triggers) or events[i,1]==0)]
problematic_events = events[non_zero_initial_states + response_trigger_initial_states,:]
#correct triggers by removing the initial nonzero state from the number in column 3
#different treatments for stimuli triggers (always below 255) and response triggers (always above 255)
for i in response_trigger_initial_states:
    if events[i,2] - events[i,1] > 255: 
        events[i,2] = events[i,2] + events[i,1] #response triggers have to be added when they are superimposed on each other
    elif events[i,2] - events[i,1] < 255: events[i,2] = events[i,2] - events[i,1] #stimuli triggers are fixed by subtracting the response trigger superimposed on them
    elif not numpy.any(events[i,2] == all_triggers) and numpy.any(events[i-1,2] == all_triggers): #check for deviations from stuck triggers in trigger column
        events[i,2] = events[i-1,2] - events[i,2]




                        

for i in non_zero_initial_states:
    if numpy.any(events[i,2] - events[i,1] == stim_triggers): 
        events[i,2] = events[i,2] - events[i,1]
    elif numpy.any(events[i,2] + events[i,1] == all_triggers):
        events[i,2] = events[i,2] + events[i,1]

#the simpler way (inapplicable for many cases)
#events[:,2] = events[:,2] - events[:,1] 

#rename old triggers
for i in range(0,len(events)):
    if numpy.any(events[i,2] == old_triggers):
        events[i,2] = events[i,2] - 96

#calculate the time between each trigger from the sample number of each event
event_sample_number = events[:,0]

sample_differences = numpy.diff(event_sample_number).tolist()
sample_differences.insert(0, 0)

sample_differences = numpy.array(sample_differences)
sample_differences = numpy.reshape(sample_differences,(sample_differences.size,1))

original_events = numpy.append(events,sample_differences, axis = 1)
#first check if it is a button press, then drop it if the previous one were also button presses or were fixed from button press superimpositions 
#and followed too quickly from the previous trigger
sticky_triggers =numpy.array([original_events[i,:] for i in range(0, len(original_events)) #
                              if (numpy.any(original_events[i-1,2]== all_triggers) or numpy.any(original_events[i-1,1]== all_triggers) or original_events[i,1]!=0 ) and numpy.any(original_events[i,2] == all_triggers) and original_events[i,3]<300]) 

fixed_events = numpy.array([original_events[i,:] for i in range(0, len(original_events)) if numpy.all(original_events[i,0] != sticky_triggers[:,0])]) 

#recheck for number of stimuli triggers. If it doesn't equal to 288 for AttenAud and 168 for AttenVis (per run), flag to take a look.
stimuli_list = fixed_events[:,2].tolist()
list_of_stimuli_triggers = [i for i in stimuli_list if i < 255] 
list_of_response_triggers = [i for i in stimuli_list if i > 255] 

#convert fixed events into dataframe to analyse
analysed_events = pandas.DataFrame(fixed_events) 
analysed_events.columns = ['sample', 'initialState','trigger','sampleDifference']

trigger_counts = analysed_events['trigger'].value_counts()

#check for largest number of triggers (leave case for those that are missing one side - eg. participant 075801)
likely_response_triggers = trigger_counts[trigger_counts.index > 100].nlargest(2).index

if numpy.any(likely_response_triggers[0] == right_triggers):
    auditory_event_dict.update({'response_right':likely_response_triggers[0]})
    auditory_event_dict.update({'response_left':likely_response_triggers[1]})
elif numpy.any(likely_response_triggers[0] == left_triggers):
    auditory_event_dict.update({'response_right':likely_response_triggers[1]})
    auditory_event_dict.update({'response_left':likely_response_triggers[0]})

both_buttons = [auditory_event_dict['response_left'], auditory_event_dict['response_right']]
analysed_events['response'] = ""

for i in range(0, len(analysed_events)-1):
    if ((numpy.any(analysed_events.trigger[i] == auditory_event_dict['response_right']) and numpy.any(analysed_events.trigger[i-1] == right_targets)) or 
        (numpy.any(analysed_events.trigger[i] == auditory_event_dict['response_left']) and numpy.any(analysed_events.trigger[i-1] == left_targets))):
        analysed_events.loc[i,'response'] = "Hit"
        analysed_events.loc[i-1,'response'] = "Target"
    elif ((numpy.any(analysed_events.trigger[i] == auditory_event_dict['response_right']) and numpy.any(analysed_events.trigger[i-1] == left_targets)) or 
          (numpy.any(analysed_events.trigger[i] == auditory_event_dict['response_left']) and numpy.any(analysed_events.trigger[i-1] == right_targets))):
        analysed_events.loc[i,'response'] = "Incorrect_Response"
        analysed_events.loc[i-1,'response'] = "Target"
    elif numpy.any(analysed_events.trigger[i] == both_buttons) and not numpy.any(analysed_events.trigger[i-1] == all_targets):
        analysed_events.loc[i,'response'] = "False_Alarm"
        analysed_events.loc[i-1,'response'] = "Non-Target"
    elif numpy.any(analysed_events.trigger[i] == all_targets) and not numpy.any(analysed_events.trigger[i+1]== all_triggers):
        analysed_events.loc[i,'response'] = "Missed_Target"
    elif numpy.any(analysed_events.trigger[i]==not_targets) and not numpy.any(analysed_events.trigger[i+1] == all_triggers):
        analysed_events.loc[i,'response'] = "Correct_Rejection"
    elif numpy.any(analysed_events.trigger[i] > 255) and not numpy.any(analysed_events.trigger[i] == both_buttons):
        analysed_events.loc[i,'response'] = "Unexpected_Response"
        if numpy.any(analysed_events.trigger[i-1] == all_targets):
            analysed_events.loc[i-1,'response'] = "Target"
        else: analysed_events.loc[i-1,'response'] = "Non-Target"


#check last trigger
analysed_events.loc[(len(analysed_events)-1),'response'] = "Correct_Rejection"

analysed_events['reaction_time']= numpy.nan
for i in range(0, len(analysed_events)):
    if numpy.any(analysed_events.trigger[i]== all_triggers) and numpy.any(analysed_events.trigger[i-1]==all_targets):        
        analysed_events.loc[i,'reaction_time'] = analysed_events.sampleDifference[i]/raw.info['sfreq']
    elif analysed_events.loc[i,'response'] == "False_Alarm":
        analysed_events.loc[i,'reaction_time'] = analysed_events.sampleDifference[i]/raw.info['sfreq']
        
response_counts = analysed_events['response'].value_counts()

#make case for empty fields
ref_index = ['Correct_Rejection', 'Target','Hit','Non-Target','False_Alarm','Incorrect_Response','Missed_Target']
if not set(ref_index).issubset(response_counts.index):
    response_counts = response_counts.reindex(ref_index,fill_value=0)
    
ref_index_stim = [1,2,3,4,5,6,7,8,11,12,13,14,25,26,27,28,35,36,37,38] + all_triggers
if not set(ref_index_stim).issubset(trigger_counts.index):
    trigger_counts=trigger_counts.reindex(ref_index_stim,fill_value=0)


behavioural_summary = { "Hits":response_counts["Hit"], "FalseAlarms":response_counts["False_Alarm"], "Misses":response_counts["Missed_Target"], "IncorrectResponses":response_counts["Incorrect_Response"],
                    "%correct":round(response_counts["Hit"]/(response_counts["Hit"]+response_counts["Missed_Target"]),2), 
                    "total_nStimuli":len(list_of_stimuli_triggers),"total_Responses": response_counts["Hit"] + response_counts["False_Alarm"]+ response_counts["Incorrect_Response"],
                    "reaction_time": analysed_events['reaction_time'].median(),
                    "Stds_on_R_Attend_R":trigger_counts[1]+trigger_counts[3],"Stds_on_L_Attend_L":trigger_counts[2]+trigger_counts[4],
                    "Stds_on_R_Attend_L":trigger_counts[5]+trigger_counts[7],"Stds_on_L_Attend_R":trigger_counts[6]+trigger_counts[8],
                    "Targets_on_R_Attend_R":trigger_counts[11]+trigger_counts[13],"Targets_on_L_Attend_L":trigger_counts[12]+trigger_counts[14],
                    "Novels_on_R_Attend_L":trigger_counts[25]+trigger_counts[27],"Novels_on_L_Attend_R":trigger_counts[26]+trigger_counts[28],
                    "Targets_on_R_Attend_L":trigger_counts[35]+trigger_counts[37],"Targets_on_L_Attend_R":trigger_counts[36]+trigger_counts[38]}

    
with open('behavioural_data.pickle', 'wb') as handle:
    pickle.dump(behavioural_summary, handle, protocol=pickle.HIGHEST_PROTOCOL)
    
fixed_events = fixed_events[:,0:3]
mne.write_events('/autofs/cluster/transcend/MEG/AttenAud/110101/visit_20220930/110101_AttenAud_run02_fixed-eve.fif',fixed_events,overwrite=True)  




    



epochs = mne.Epochs(raw, fixed_events, tmin=-0.3, tmax=0.7, event_id=auditory_event_dict,
                    preload=True)

#load alignment csv file
df = pandas.read_csv ('AttenAud_ERM_MRI_alignment_from_20190314_to_20230327.csv')
df['Trigger_numbers'] = df['Trigger_numbers'].astype('object')

for i in range(0,len(df)):
    file = df.loc[i,'Paradigm_data_path']
    raw = mne.io.read_raw_fif(file)
    try:
        events = mne.find_events(raw, stim_channel='STI101')
        df.at[i,'errors'] = 'no input error'
    except:
        events = mne.find_events(raw, stim_channel='STI101',shortest_event=1)
        df.at[i,'errors'] = 'ValueError:shortest_event=1'
    non_zero_initial_states = [i for i in range(0, len(events)) if numpy.any(events[i,1]== all_triggers)] #only apply the superimposition fix if the initial state is a response trigger
    problematic_events = events[non_zero_initial_states,:]
    #correct triggers by removing the initial nonzero state from the number in column 3
    #different treatments for stimuli triggers (always below 255) and response triggers (always above 255)
    for i in non_zero_initial_states:
        if events[i,2] - events[i,1] > 255: 
            events[i,2] = events[i,2] + events[i,1] #response triggers have to be added when they are superimposed on each other
        else: events[i,2] = events[i,2] - events[i,1] #stimuli triggers are fixed by subtracting the response trigger superimposed on them
        
    stimuli_list = numpy.unique(events[:,2].tolist()).tolist()
    df.at[i,'Trigger_numbers'] = stimuli_list
    
df.to_csv('AttenAud_ERM_MRI_alignment_from_20190314_to_20230327_with_triggers.csv')

#check for range of gaps between sticky triggers 
#defined as any response triggers that follow a response trigger or a trigger corrected from an initial state of a response trigger
stuck_triggers = [i for i in range(0, len(events)) if numpy.any(events[i,2]== all_triggers) and (numpy.any(events[i-1,2]== all_triggers) or numpy.any(events[i-1,1]== all_triggers))]
time_to_repeat = pandas.Series(original_events[stuck_triggers,3])